---
title: "STAT 331 Portfolio"
author: "Adam Kong"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an A.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from a Lab or Challenge assignment where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

```{r wd-1-csv}
# Week 4: Lab 4 Q 0
#| message: false

avocado <- read_csv(here::here("Week 4", "Lab 4", "avocado.csv"))
```

-   `xlsx`

```{r wd-1-xlsx}
# Week 2: Practice Activity Q 1

# Code to read in the ages.xlsx data goes here! 
read_excel(here::here("Week 2", "Practice Activity", "Ages_Data", "ages.xlsx"))
```

-   `txt`

```{r wd-1-txt}
# Week 5: Practice Activity 5.1 regex Setup
message <- read_csv(here::here("data", "scrambled_message.txt"))
```

**WD-2: I can select necessary columns from a dataset.**

```{r wd-2}
# Week 3: Lab 3 Q 9

hiphop_clean |>
  select(subj, sex, age, ethnic) |>
  distinct(subj, .keep_all = TRUE) |>
  summary()
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r wd-3-numeric}
# Week 3: Lab 3 Q 11

hiphop_clean |>
  filter(age < 20) |>
  group_by(word) |>
  summarize(mean_words = mean(familiarity)) |>
  slice_max(mean_words)

```

-   character -- specifically a string

```{r wd-3-string}
# Week 5: Practice Activity 5.1 Q 3

message |>
  filter(str_detect(Word, pattern = "^m"))
```

-   factor

```{r wd-3-factor}
# Week 3: Lab 3 Q 13

# code chunk for Q13
hiphop_clean |>
  filter(sex == 'Male', ethnic == 'white', age > 30) |>
  group_by(word) |>
  summarize(mean_words3 = mean(familiarity)) |>
  slice_max(mean_words3)
```

-   date

```{r wd-3-date}
# Week 5: Practice Activity 5.2 Lubridate Q 1

suspects_clean <- suspects |>
  filter(pm(Time.Spotted))
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r wd-4-numeric}
# Week 4: Lab 4 Q 6 (Revision)
cali_organic_convention <- cali_avocados |>
  group_by(type, region) |>
  summarise(meanprice = mean(AveragePrice)) |>
  pivot_wider(names_from = type, 
               values_from = meanprice) |>
  mutate(avocadoDiff = organic - conventional) |>
  select(region, avocadoDiff)
```

-   character -- specifically a string

```{r wd-4-string}
# Week 5: Practice Activity 5.1 Regex Q 6

message |>
  mutate(word_count = str_length(Word)) |>
  arrange(desc(word_count)) |>
  slice_max(word_count)
```

-   factor

```{r wd-4-factor}
# Week 4: Lab 4 Q 7 (Revision)

#| message: false
recreate_graph <- cali_avocados |>
  pivot_longer(cols = Small:ExtraLarge,
               names_to = "Avocado Size",
               values_to = "Avocado_Sold") |>
  group_by(region, type, `Avocado Size`) |>
  summarise(mean_sold = mean(Avocado_Sold)) |>
  arrange(desc(`Avocado Size`)) |>
  mutate(`Avocado Size`= factor(`Avocado Size`, level = c('Small',
                                                          'Large',
                                                          'ExtraLarge')))

```

-   date

```{r wd-4-date}
# Week 5 Practice Activity 5.1 Setup

suspects_clean <- suspects |>
  mutate(Time.Spotted = ymd_hms(Time.Spotted))
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

```{r wd-5-left}
# Week 4: Challenge 4

combined_data <- cali_avocados |>
  left_join(HPI_index, by = "region") |>
  filter(year.x == year.y) |>
  group_by(year.x, region, AveragePrice)
```

-   `right_join()`

```{r wd-5-right}
# Week 4: Lab 4 Q 2

topFiveRegions <- metro_avocado |>
  group_by(region) |>
  summarise(mean_sold = mean(`Total Volume`)) |>
  arrange(desc(mean_sold)) |>
  slice_max(mean_sold, n = 5)

graphFiveMetro <- avocado |>
  right_join(topFiveRegions)

```

-   `inner_join()`

```{r wd-5-inner}
# Week 4: Practice Activity 11 Q 1
prof |>
  inner_join(prof_info, prof_course)
```

-   `full_join()`

```{r wd-5-full}
# Week 4: Practice Activity 11 Q 1
prof |>
  full_join(prof_info, prof_course)
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r wd-6-semi}
# Week 4: Lab 4 Q 2

#| message: false
region_major <- tibble(region = c("GreatLakes",
                                  "Midsouth",
                                  "Northeast",
                                  "Plains",
                                  "SouthCentral",
                                  "Southeast",
                                  "West")
                       )

region_avocado <- avocado |>
  semi_join(region_major, by = "region")

```

-   `anti_join()`

```{r wd-6-anti}
# Week 4: Lab 4 Q 2

#| message: false
region_major <- tibble(region = c("GreatLakes",
                                  "Midsouth",
                                  "Northeast",
                                  "Plains",
                                  "SouthCentral",
                                  "Southeast",
                                  "West")
                       )

region_not_included <- region_major |>
  bind_rows(tibble(region = c("California",
                              "SouthCarolina",
                              "TotalUS")))

metro_avocado <- avocado |>
  anti_join(region_not_included)
```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r wd-7-long}
# Week 4: Lab 4 Q 7 (Revision)

#| message: false
recreate_graph <- cali_avocados |>
  pivot_longer(cols = Small:ExtraLarge,
               names_to = "Avocado Size",
               values_to = "Avocado_Sold") |>
  group_by(region, type, `Avocado Size`) |>
  summarise(mean_sold = mean(Avocado_Sold)) |>
  arrange(desc(`Avocado Size`)) |>
  mutate(`Avocado Size`= factor(`Avocado Size`, level = c('Small',
                                                          'Large',
                                                          'ExtraLarge')))

```

-   `pivot_wider()`

```{r wd-7-wide}
# Week 4: Lab 4 Q 6 (Revision)

cali_organic_convention <- cali_avocados |>
  group_by(type, region) |>
  summarise(meanprice = mean(AveragePrice)) |>
  pivot_wider(names_from = type, 
               values_from = meanprice) |>
  mutate(avocadoDiff = organic - conventional) |>
  select(region, avocadoDiff)

```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments: Lab 2 Challenge 2 Lab 3 Challenge 3 Lab 4 (Maybe).

**R-2: I can write well documented and tidy code.**

-   Example 1

```{r r-2-1}
# Week 3: Lab 3 Q 4
hiphop |>
  select(c(asianMove:blackWeekly)) |>
  summarise(across(everything(), mean))
```

-   Example 2

```{r r-2-2}
# Week 4: Lab 4 Q 7

#| message: false
recreate_graph <- cali_avocados |>
  pivot_longer(cols = Small:ExtraLarge,
               names_to = "Avocado Size",
               values_to = "Avocado_Sold") |>
  group_by(region, type, `Avocado Size`) |>
  summarise(mean_sold = mean(Avocado_Sold)) |>
  arrange(desc(`Avocado Size`)) |>
  mutate(`Avocado Size`= factor(`Avocado Size`, level = c('Small',
                                                          'Large',
                                                          'ExtraLarge')))

# https://www.guru99.com/r-factor-categorical-continuous.html#:~:text=What%20is%20Factor%20in%20R,integer%20data%20values%20as%20levels.

ggplot(recreate_graph, aes(fill = `Avocado Size`, 
                           x = region,
                           y = mean_sold)) +
  geom_bar(position = "fill", stat = "identity") +
  facet_wrap(~type) +
  labs(
    x = "Region of CA",
    y = "Proportion of Mean Avocados Sold",
  ) +
  scale_fill_manual(labels = c("Small", "Large", "Extra Large"), values = c("#a6cee3", "#1f78b4", "#b2df8a")) +
  scale_x_discrete(guide = guide_axis(n.dodge = 2))
  
# https://ggplot2.tidyverse.org/articles/faq-axes.html
```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example 1

```{r r-3-1}
# Week 3: Lab 3 Q 14

hiphop_clean |>
  filter(sex == 'Male', ethnic == 'white',
           age > 17, age < 23,
           city > 10000, city < 60000) |>
  slice_max(bieber) |>
  distinct(subj, .keep_all = TRUE)
```

-   Example 2

```{r r-3-2}
# Week 2: Lab 2 Q 14

#| warning: FALSE
# Code for question 14!
ggplot(data = surveys, aes(x = species, y = weight)) +
  geom_jitter(color = "darkseagreen") +
  geom_boxplot(outlier.shape = NA) + 
  labs(
    title = "Weight Distribution in Grams by Species",
    x = "Species"
  ) +
  theme(
    axis.title.y = element_blank(),
    axis.text.x = element_text(angle=45)
  )

# Tilted x-axis labels because it would be hard to read.
# https://www.datanovia.com/en/blog/ggplot-axis-ticks-set-and-rotate-text-labels/
```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   numeric variables

```{r dvs-1-num}
# Week 1: Lab 1 Q 2

dist <- cars[,2]
hist(dist, xlab = "Stopping Distance in ft")

plot(cars, xlab = "Car Speed in MPH", ylab = "Stopping Distance in ft")

```

-   numeric variables and categorical variables

```{r dvs-2-num-cat}
# Week 4: Lab 4 Q 5

# Top most sold avocados for the five metro regions were:
# Los Angeles, New York, Dallas Fortworth, Houston, Phoenix Tuscon

ggplot(graphFiveMetro, aes(x = region, y = `Total Volume`, fill = region)) +
  geom_boxplot() +
  geom_jitter() +
  labs(
    title = "Highest Average Avocados Sold",
    x = "Region",
    y = "Average Avocado Sold"
  )
```

-   categorical variables

```{r dvs-2-cat}
# Week 3: Lab 3 Q 9

hiphop_clean |>
  select(subj, sex, age, ethnic) |>
  distinct(subj, .keep_all = TRUE) |>
  count(sex, age, ethnic)
```

-   dates

```{r dvs-2-date}
# Week 5: Practice Acticity 5 Lubridate Q 2

suspects_clean <- suspects_clean |>
  filter(!wday(Time.Spotted, label = TRUE, abbr = FALSE) %in% 
           c("Tuesday", "Thursday")
         )
suspects_clean
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   Example 1

```{r dvs-2-1}
# Week 2: Lab 2 Q 14

# Code for question 13! 
ggplot(data = surveys, aes(x = weight, y = species)) +
  geom_jitter(color = "cadetblue") +
  geom_boxplot(outlier.shape = NA) + 
  labs(
    title = "Weight Distribution by Species",
    x = "Weight (g)") +
  theme(
    axis.title.y = element_blank()
    )

# https://www.datanovia.com/en/blog/ggplot-axis-labels/


```

-   Example 2

```{r dvs-2-2}
# Week 5: Lab 5 Part 1 Q 3 (Revision)

ggplot(data = mean_surveys, 
       mapping = aes(x = year, 
                     y = mean_weight, 
                     color = fct_reorder2(genus, 
                                          .x = year, 
                                          .y = mean_weight,
                                          .desc = TRUE))) +
  geom_jitter() +
  geom_line() +
  labs(
    x = "Year",
    y = "Mean Rodent Weight (g)",
    color = "Rodent Genus"
  )

```

**DVS-3: I show creativity in my visualizations**

-   Example 1

```{r dvs-3-1}
# Week 2: Ugly Penguin Competition


ugly <- ggplot(data = penguins) + 
  geom_point(mapping = aes(x = bill_length_mm, y = bill_depth_mm, color = species, shape = island, size = year, alpha = body_mass_g)) +
  labs(x = "BiLL lenGtH(mM0)", y = "bIlL leNgTh9(mm))") + 
  scale_shape_manual(values = c(9, 16, 19)) + 
  theme_light() +
  geom_smooth(mapping = aes(x = bill_length_mm, y = bill_depth_mm, color = island))

ugly + theme(
  panel.background = element_rect(fill = "#7B3F00", size = 5)) +
  theme(plot.background = element_rect(fill = "#FFFF00", size = 0.1))

```

-   Example 2

```{r dvs-3-2}
# Week 4: Lab 4 Q 7

# Note: Not my original graph, but replicating this graph showed how much there was to learn about visualization and I loved completing this part of the lab.

ggplot(recreate_graph, aes(fill = `Avocado Size`, 
                           x = region,
                           y = mean_sold)) +
  geom_bar(position = "fill", stat = "identity") +
  facet_wrap(~type) +
  labs(
    x = "Region of CA",
    y = "Proportion of Mean Avocados Sold",
  ) +
  scale_fill_manual(labels = c("Small", "Large", "Extra Large"), values = c("#a6cee3", "#1f78b4", "#b2df8a")) +
  scale_x_discrete(guide = guide_axis(n.dodge = 2))

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example 1

```{r dvs-4-1}
# Week 3: Lab 3 Q 4

hiphop |>
  select(c(asianMove:blackWeekly)) |>
  summarise(across(everything(), mean))
```

-   Example 2

```{r dvs-4-2}
# Week 5: Lab 5 Q 2

mean_surveys <- surveys |>
  group_by(year, genus) |>
  summarise(mean_weight = mean(weight))
```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r dvs-5-1}
# Week 3: Lab 3 Q 4

hiphop |>
  select(c(asianMove:blackWeekly)) |>
  summarise(across(everything(), mean))

```

-   Example 2

```{r dvs-5-2}
# Week 4: Practice Activity 4: Military Q 2

military_clean <- military |>
  mutate(across(.cols = Country:`2019`, .fns = ~na_if(., "xxx")),
         across(.cols = Country:`2019`, .fns = ~na_if(., ". .")))
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

```{r dvs-6-1}
# Week 3: Lab 3 Q 4

hiphop |>
  select(c(asianMove:blackWeekly)) |>
  summarise(across(everything(), mean))
```

-   Example 2

```{r dvs-6-2}
# Week 4: Lab 4 Q 3

region_avocado |>
  filter(year == 2017, type == "organic") |>
  group_by(region) |>
  summarise(small_sum_sold = sum(Small)) |>
  arrange(desc(small_sum_sold)) |> 
  slice_max(small_sum_sold)

```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r dvs-7-1}



```

-   Example 2

```{r dvs-7-2}

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call

```{r pe-1-one-call}
# Week 3: Lab 3 Q 14

hiphop_clean |>
  filter(sex == 'Male', ethnic == 'white',
           age > 17, age < 23,
           city > 10000, city < 60000) |>
  slice_max(bieber) |>
  distinct(subj, .keep_all = TRUE)
```

-   `across()`

```{r pe-1-across}
# Week 4: Practice Activity 4: Military Q 2

military_clean <- military |>
  mutate(across(.cols = Country:`2019`, .fns = ~na_if(., "xxx")),
         across(.cols = Country:`2019`, .fns = ~na_if(., ". .")))
```

-   `map()` functions

```{r pe-1-map-1 Not Yet Learned}

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1

```{r pe2-1 Not Yet Learned}

```

-   Example 2

```{r pe2-2 Not Yet Learned}

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

```{r pe-3-across}
# Week 3: Lab 3 Q 4

hiphop |>
  select(c(asianMove:blackWeekly)) |>
  summarise(across(everything(), mean))
```

-   `map()` functions (Provide 2 Examples)

```{r pe-3-map-1 Not Yet Learned}

```

```{r pe-3-map-2 Not Yet Learned}

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   Example 1

```{r pe-4-1} ?Not to sure if the class has gone over this section yet...}
# Week 5: Lab 5 Part 3 Q 3

ggplot(data = na.omit(dates_collapsed2), 
       mapping = aes(x = level, 
                     y = n, 
                     fill = level )) +
  geom_col() +
  labs(
    title = "Number of Rodents caught during the Week",
    fill = "Week Level"
  ) +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  )

```

-   Example 2

```{r pe-4-2}
# Week 4: Lab 4 Q 4


region_avocado |>
  separate(Date, c("Year", "Month", "Day")) |>
  group_by(Month) |>
  summarise(sold_mean = mean(`Total Volume`)) |>
  arrange(desc(sold_mean)) |>
  slice_max(sold_mean)

```

## Data Simulation & Modeling

**DSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r dsm-1-1 Not Yet Learned}

```

-   Example 2

```{r dsm-1-2 Not Yet Learned}

```

**DSM-2: I can fit a linear regression and extract necessary summary measures.**

-   Example 1

```{r dsm-2-1 Not Yet Learned}

```

-   Example 2

```{r dsm-2-2 Not Yet Learned}

```

## Revising My Thinking

I think a lot of my thinking in code has changed a lot throughout the course. I used to think that long and code meant the code was much better. But after revising my code many times I realized that shorter code is much better. My work and my revisions can be also seen in the challenges. Often times during the challenges I attempt to go beyond the expectations of this class by including additional information and including materials not taught in the regular courses into my assignments. But I've learned that perfection doesn't happen first try. I learnt after having to complete several revisions that striving to perfection is learning. I consider alot of what Professor Theobold and my peer reviews comment on my labs and assignments and try to fit those into my re submissions. A lot of the revision in the portfolio have come from redoing certain problems and understood what the comments meant for each one. Although maybe not all the code is perfect or even correct, I put in effort to try and revise my thinking in order to become a better programmer.

## Extending My Thinking

Throughout the course I take time trying to understand each concept. I dedicate a lot of time to understand concepts and try to use these concepts in the labs afterward. For new materials I first try to figure out new concepts and think of new ways of how I can implement these ideas into an assignment. Then if I can't understand a concept or idea, I'd try to reach out to professor Theobold or use the class Discord to ask questions about a part I don't understand. But most of my time on Discord I found that my other peers have already asked the same questions and I use those answer in my assignments. In my previous reflection, I even mentioned how I extended my thinking beyond the class by including an example from Challenge 1 where I added many more colors and changed the background. In addition I would like to add the ugly plot competition, since that was not part of the normal course but I showed my attempt at extended thinking.

## Peer Support & Collaboration

![Answer to a Discord Question](images/Screenshot%202023-02-19%20090445-01.png)

This paragraph was copied and pasted from another one of my reflections. However, I feel as if this does still reflect on how I did regarding peer support and collaboration.

In the two practice activities, I took the roles of facilitator and recorder. During each practice activity I would make sure to engage with my peers and ensure that our group would discuss each problem. When I was the role of recorder I made sure to listen to each suggestion my peers made and made that edit. I noticed while working on the practice activity, when one member would want to correct another team member, that team member would wait for the other team member to finish talking before suggesting the correct solution.

In the Discord I would sometimes ask questions, but I would also look on the Discord for help. So far I have only asked one question so far, but I like Discord because I can look at what other people asked and use those to answer some of the questions I had. I also participate in the Discord chat and try to answer questions whenever I know the answers. To go further I would test their solution, if they posted their code, and confirm whether it would be an issue on my end or their end.
